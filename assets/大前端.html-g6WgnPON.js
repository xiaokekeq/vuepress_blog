import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,b as e}from"./app-qaerbkEg.js";const t="/vuepress_blog/assets/image-20240129200443216-08GACbJy.png",p="/vuepress_blog/assets/image-20240203215721847-Iy1-ZhXQ.png",o="/vuepress_blog/assets/image-20240204115157968-agpepV10.png",c={},l=e('<h1 id="大前端" tabindex="-1"><a class="header-anchor" href="#大前端"><span>大前端</span></a></h1><h1 id="node-js" tabindex="-1"><a class="header-anchor" href="#node-js"><span>Node js</span></a></h1><figure><img src="'+t+`" alt="nodejs与java类比" tabindex="0" loading="lazy"><figcaption>nodejs与java类比</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//1. 创建一个httpserver服务</span>
    <span class="token comment">//浏览器怎么认识hello server</span>
    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string-property property">&#39;Context-type&#39;</span><span class="token operator">:</span><span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//这句话的意思是：告诉浏览器将以text-plain去解析</span>
    <span class="token comment">//plain就是以什么方式输出。text/html 以html来进行解析</span>
    <span class="token comment">//hello server 这段数据</span>
    <span class="token comment">//给浏览器输出内容</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;strong&gt;hello server!!!&lt;/strong&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;已启动服务是：http://localhost:8888&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//2. 监听一端口：8888</span>
<span class="token comment">//3. 启动运行服务 node httpserver.js</span>
<span class="token comment">//4. 在浏览器访问http://localhost:8888</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Node-操作MYSQL数据库</p><ol><li><p>安装mysql依赖</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>npm install mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>定义dlb.js进行操作</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> mysql <span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mysql&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> connection<span class="token operator">=</span>mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">host</span><span class="token operator">:</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span><span class="token string">&quot;me&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">&quot;secret&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span><span class="token operator">:</span><span class="token string">&quot;my_db&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
coonnection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;SQL语句&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>results<span class="token punctuation">,</span>fields</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The solution is:&quot;</span><span class="token punctuation">,</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>solution<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//1. 导入mysql依赖包 mysql数据第三方的模块就类似于java.sql</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> log <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;console&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> mysql<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mysql&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> createConnection <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;net&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//1：创建一个mysql的connection对象</span>
<span class="token comment">//2：配置数据连接的信息</span>
<span class="token keyword">var</span> connection<span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span><span class="token number">3306</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span><span class="token operator">:</span><span class="token string">&quot;testdb&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//3：开辟连接</span>
connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//4：执行curd...增删改查</span>
connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&quot;select * from kss_user&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>results<span class="token punctuation">,</span>fields</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//查询失败，直接抛出错误</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token keyword">throw</span> error<span class="token punctuation">;</span>
    <span class="token comment">//查询成功</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;results=&quot;</span><span class="token punctuation">,</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//5：关闭连接</span>
connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//最后一步运行node db.js查看结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>node 导入包使用 require</p></blockquote><h1 id="es6-ecmscript" tabindex="-1"><a class="header-anchor" href="#es6-ecmscript"><span>Es6(ECMScript)</span></a></h1><p>用来指定JavaScript语法</p><h2 id="let和const命令" tabindex="-1"><a class="header-anchor" href="#let和const命令"><span>let和const命令</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token comment">// 传统定义变量和常量的方式 统一使用var</span>
        <span class="token keyword">var</span> name<span class="token operator">=</span><span class="token string">&quot;iwen&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> link<span class="token operator">=</span><span class="token string">&quot;www.baidu.com&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> <span class="token constant">PI</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//ES6定义的方式</span>
        <span class="token comment">//变量</span>
        <span class="token keyword">let</span> name2<span class="token operator">=</span><span class="token string">&quot;frank&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> link2<span class="token operator">=</span><span class="token string">&quot;www.qq.com&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//常量</span>
        <span class="token keyword">const</span> <span class="token constant">PI2</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>

        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>link2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">PI2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//区别</span>
        <span class="token comment">//let 和const解决</span>
        <span class="token comment">//1.var的变量穿透问题</span>
        <span class="token comment">//2.常量修改的问题</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//这里就造成变量穿透</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">//用let代替就行</span>

        <span class="token comment">//常量但是可以修改</span>
        <span class="token keyword">var</span> <span class="token constant">PI3</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>
        <span class="token constant">PI</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">PI3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//所有使用const</span>
        <span class="token comment">//const PI3=Math.PI;</span>

        <span class="token comment">//小程序，uniapp或脚手架中可以大量使用let和const</span>
        <span class="token comment">//web开发还是使用var</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模板字符串" tabindex="-1"><a class="header-anchor" href="#模板字符串"><span>模板字符串</span></a></h2><p>以前：使用&#39;&#39;或者&quot;&quot;来吧字符串套起来</p><p>现在：\`\`【反引号】</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token comment">//字符串会牵涉到动态部分</span>
        <span class="token keyword">var</span> person<span class="token operator">=</span><span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">address</span><span class="token operator">:</span><span class="token string">&quot;is&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">link</span><span class="token operator">:</span><span class="token string">&quot;message&quot;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> address1<span class="token operator">=</span><span class="token string">&quot;我是消息&quot;</span><span class="token operator">+</span><span class="token string">&quot;test&quot;</span><span class="token operator">+</span>person<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">&quot;test&quot;</span><span class="token operator">+</span>person<span class="token punctuation">.</span>address<span class="token operator">+</span>person<span class="token punctuation">.</span>link<span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>address1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//es6的语法模板字符串</span>
        <span class="token keyword">let</span> address2<span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ES6--我是消息test</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>person<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>person<span class="token punctuation">.</span>address<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>person<span class="token punctuation">.</span>link<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>address2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数默认参数与箭头函数" tabindex="-1"><a class="header-anchor" href="#函数默认参数与箭头函数"><span>函数默认参数与箭头函数</span></a></h2><h3 id="函数默认参数" tabindex="-1"><a class="header-anchor" href="#函数默认参数"><span>函数默认参数</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//函数默认值</span>
        <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> result<span class="token operator">=</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//没有传递参数计算出来时Nan</span>
        <span class="token comment">//因为没有传递值的话默认传递的时undefined</span>
        <span class="token comment">//所以可以写默认参数</span>
        <span class="token comment">// function sum(a=100,b=200){</span>
        <span class="token comment">//    return a+b;</span>
        <span class="token comment">//}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数"><span>箭头函数</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//箭头函数-重点</span>
        <span class="token keyword">var</span> <span class="token function-variable function">sum</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//箭头函数 - 改进1</span>
        <span class="token keyword">var</span> <span class="token function-variable function">sum</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//箭头函数 - 改进2</span>
        <span class="token keyword">var</span> <span class="token function-variable function">sum</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>

        <span class="token comment">//规律</span>
        <span class="token comment">//1. 去掉function</span>
        <span class="token comment">//2. 在括号后面加箭头</span>
        <span class="token comment">//3. 逻辑代码中仅有return可以直接省去（如果不止return就不能省略）</span>
        <span class="token comment">//4. 如果参数只有一个，可以把括号也省去（多个参数就不能省去）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象初始化简化" tabindex="-1"><a class="header-anchor" href="#对象初始化简化"><span>对象初始化简化</span></a></h2><blockquote><p>它是指：如果一个对象中的key和value的名字一样的情况下可以定义成一个</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token keyword">let</span> info1<span class="token operator">=</span><span class="token punctuation">{</span>
            <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">&quot;xiaoke&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">link</span><span class="token operator">:</span><span class="token string">&quot;www.baidu.com&quot;</span><span class="token punctuation">,</span>
            <span class="token function-variable function">go</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;在家学es6语法&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//es6简写语法</span>
        <span class="token comment">//因为对象时key：value存在</span>
        <span class="token comment">//1：如果key和变量的名字一致，可以只定一次即可</span>
        <span class="token comment">//2：如果value时一个函数，可以把\`:function\`全部去掉剩下()即可</span>
        <span class="token keyword">let</span> title<span class="token operator">=</span><span class="token string">&quot;xiaoke&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> link<span class="token operator">=</span><span class="token string">&quot;www.baidu.com&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> info2<span class="token operator">=</span><span class="token punctuation">{</span>
            title<span class="token punctuation">,</span>
            link<span class="token punctuation">,</span>
            <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;在家学es6语法&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>es6简写语法 因为对象时<code>key:value</code>存在 1：如果key和变量的名字一致，可以只定一次即可 2：如果value时一个函数，可以把<code>:function</code>全部去掉剩下()即可</p></blockquote><h2 id="对象结构" tabindex="-1"><a class="header-anchor" href="#对象结构"><span>对象结构</span></a></h2><p>快捷获取对象属性和方法的方式</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//对象是key:value存在，获取对象属性和方法的方式由两种</span>
        <span class="token comment">//1：通过.</span>
        <span class="token comment">//2：通过[]</span>
        <span class="token keyword">var</span> title<span class="token operator">=</span><span class="token string">&quot;xiaoke&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> link<span class="token operator">=</span><span class="token string">&quot;www.baidu.com&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> info2<span class="token operator">=</span><span class="token punctuation">{</span>
            title<span class="token punctuation">,</span>
            link<span class="token punctuation">,</span>
            <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;在家学es6语法&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//1 通过.</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info2<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info2<span class="token punctuation">.</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>
        info2<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2 通过[]</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info2<span class="token punctuation">[</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info2<span class="token punctuation">[</span><span class="token string">&quot;link&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        info2<span class="token punctuation">[</span><span class="token string">&quot;go&quot;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//es6对象结构 - 其实就是快速获取对象属性和方法的一种方式</span>
        <span class="token keyword">var</span> <span class="token punctuation">{</span>title<span class="token punctuation">,</span>link<span class="token punctuation">,</span>go<span class="token punctuation">}</span> <span class="token operator">=</span>info2<span class="token punctuation">;</span>
        <span class="token comment">//还原代码</span>
        <span class="token comment">//var title=info2.title;</span>
        <span class="token comment">//var link=info2.link;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//问题：为什么对象取值要提供两种方式。 .  一个[]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="传播操作符" tabindex="-1"><a class="header-anchor" href="#传播操作符"><span>传播操作符</span></a></h2><p>把一个对象的属性传播到另一个对象中</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token comment">//对象传播操作符 ...</span>
        <span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;学相伴&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">&quot;广东&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">link</span><span class="token operator">:</span> <span class="token string">&quot;www.baidu.com&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token number">123456</span><span class="token punctuation">,</span>
            <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;开始学习啦&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//解构对象</span>
        <span class="token keyword">var</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> address<span class="token punctuation">,</span> <span class="token operator">...</span>person2 <span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小案例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//java ---后台</span>
        <span class="token comment">// 数据格式：var userPage={pages:10,user:[{},{}],pageNo:1,pageSize:100,tital:100};</span>
        <span class="token comment">//异步请求</span>
        <span class="token comment">//$.post(&quot;/user/search&quot;,function(res){</span>
        <span class="token comment">//    res={pages:10,user:[{},{}],pageNo:1,pageSize:100,tital:100};</span>
        <span class="token keyword">var</span> userPage<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">pages</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token literal-property property">user</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token literal-property property">pageNo</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">pageSize</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token literal-property property">tital</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> <span class="token punctuation">{</span>user<span class="token punctuation">,</span><span class="token operator">...</span>userPage2<span class="token punctuation">}</span><span class="token operator">=</span>userPage<span class="token punctuation">;</span>
        <span class="token comment">//})</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据map和reduce的使用方法" tabindex="-1"><a class="header-anchor" href="#数据map和reduce的使用方法"><span>数据map和reduce的使用方法</span></a></h2><p>目标：数组中map方法的应用场景</p><p>讲解：数组中新增了map和reduce方法</p><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>map()</span></a></h3><p>该方法可以将原数组中的所有元素通过一个函数进行处理并放入到一个新数组中并返回该新数组</p><p>map(function())</p><p><strong>map --自带的循环，并且会把处理的值回填到对应的位置</strong></p><p>案例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token comment">//要对arr数组每个元素*2</span>
        <span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//传统做法</span>
        <span class="token keyword">let</span> newarr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            newarr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newarr<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//map --自带的循环，并且会把处理的值回填到对应的位置</span>
        <span class="token keyword">var</span> newarr2<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">ele</span><span class="token operator">=&gt;</span>ele<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newarr2<span class="token punctuation">)</span>

        <span class="token comment">//map处理对象的数据</span>
        <span class="token keyword">var</span> users<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;小学&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;小相&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;小伴&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> newusers<span class="token operator">=</span>users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ele</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            ele<span class="token punctuation">.</span>age<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
            ele<span class="token punctuation">.</span>check<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> ele<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newusers<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reduce" tabindex="-1"><a class="header-anchor" href="#reduce"><span>reduce()</span></a></h3><p>reduce(function(),初始值(可选))</p><p>接收一个函数(必须)和一个初始值(可选),该函数接收两个参数：</p><ol><li>第一个参数是上一次reduce处理的结果</li><li>第二个参数是数组中要处理的下一个元素</li></ol><p>​ reduce()会从左到右依次把数组中的元素用reduce处理，并把处理的结果作为下次reduce的第一个参数，如果是第一次，会把前两个元素作为计算参数或者把用户指定的初始值作为起始参数</p><blockquote><p>es6语法是可以在nodejs里面使用的 uniapp，微信小程序也是可以的使用es6语法</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//a =1 ,b =2  3</span>
        <span class="token comment">//a =3 ,b =3  6</span>
        <span class="token comment">//a =6 ,b =4  10</span>
        <span class="token comment">//a =10,b =5  15</span>
        <span class="token keyword">var</span> result<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="npm包管理器" tabindex="-1"><a class="header-anchor" href="#npm包管理器"><span>NPM包管理器</span></a></h1><p>NPM：Node Package Manage 是nodejs包管理工具，</p><ol><li><p>快速构建nodejs工程</p><ul><li><p>npm init/npm init -y ：得到package.json找个文件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm&quot;</span><span class="token punctuation">,</span><span class="token comment">//项目名称</span>
  <span class="token string-property property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span><span class="token comment">//版本</span>
  <span class="token string-property property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token comment">//描述</span>
  <span class="token string-property property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span><span class="token comment">//入口js</span>
  <span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">//运行脚本</span>
    <span class="token string-property property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token comment">//开发作者</span>
  <span class="token string-property property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span><span class="token comment">//授权协议</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>类似于：pox.xml文件作用管理依赖</p></li><li><p>快速安装和依赖第三方模块，比如mysql，redis等等</p></li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//查看npm版本
npm -v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2：快速安装和依赖第三方模块</p><p>2-1：快速安装依赖第三方模块 <code>npm install xxx 或 npm i xxx模块名称</code></p><p>2-2：安装在什么地方</p><p>​ 相同目录下会有一个<code>node_modules</code>文件夹</p><p>2-3：安装模块如何使用</p><p>​ <code>node：cosnt modules=require(&quot;模块名&quot;)</code></p><p>2-4：模块和package.json有什么关系呢？</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;@vuepress/bundler-vite&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.0.0-rc.2&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;vue&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.4.15&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;vuepress&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.0.0-rc.2&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;vuepress-theme-hope&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.0.0-rc.18&quot;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 通过npm install xxx 会记录在package.js中，</p><p>​ 类似于maven中pom.xml一个含义，<strong>记录作用在于复用</strong></p><p>​ 1.package.js记录依赖模块</p><p>​ 2.通过npm install 可以直接把package.js所依赖的模块全部自动下载下来这样就可以避免重复下载模块，方便去集成第三方模块</p><p>​ 3.为什么不直接拷贝：node_mdiles呢，当然可以</p><p>​ 为什么不拷贝，因为：下载模块的依赖过多文件而且很大，混乱文件很多，</p><p>2-5：如果安装模块很慢怎么办</p><p>​ 换成淘宝镜像</p><p>2-6：如何运行</p><p>​ <code>node 文件名.js 运行过程.js是可以省去的</code> 终止的命令：CTRL+C多次执行</p><p>2-7：如何下载多个</p><p>​ <code>npm install jquery vue redis mysql</code></p><p>2-8：下载指定版本号</p><p>​ npm i redis@3.0.2</p><p>​ npm i xxx@版本号</p><p>​ 不指定默认最新</p><p>2-9：如何卸载</p><p>​ <code>npm uninstall vue jquery</code> ：卸载多个</p><h1 id="babel" tabindex="-1"><a class="header-anchor" href="#babel"><span>Babel</span></a></h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>ES6的某些高级语法在浏览器环境甚至是node.js环境无法执行</p><p>Babel是一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而在现有环境执行</p><p>这意味着，可以用ES6编写程序，不用担心环境是否支持</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><p>安装命令行转码工具</p><blockquote><p>Babel提供babel-cli工具，用于命令行转码，他的安装命令如下</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>npm install -g babel-cli
#查看是否安装成功
babel --version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="babel的使用" tabindex="-1"><a class="header-anchor" href="#babel的使用"><span>Babel的使用</span></a></h2><ol><li>创建babel文件</li><li>初始化项目</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>npm init -y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><pre><code>3. 创建文件src/example.js下面是一段ES6代码
</code></pre><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//转码前
//定义数据
let input=[1,2,3]
//将数组的每个元素+1
input=input.map(item=&gt;item+1)
console.log(input)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>4. 配置.babelrc
</code></pre><blockquote><p>Babel的配置文件是babelrc，存放在项目的根目录下，该文件用来设置转码规则和插件，基本格式如下。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;presets&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;plugins&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>presets字段设置转码规则，将es2015规则加入.balbelrc：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token string-property property">&quot;presets&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;es2015&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;plugins&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>5. 安装转码器，在项目中安装
</code></pre><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev babel<span class="token operator">-</span>preset<span class="token operator">-</span>es2015
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><pre><code>6. 转码
</code></pre><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code># npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev csv<span class="token operator">-</span>loader xml<span class="token operator">-</span>loader
#转码结果写入一个文件
mkdir dist1
# <span class="token operator">--</span>out<span class="token operator">-</span>file 或 <span class="token operator">-</span>o 参数指定输出文件
babel src<span class="token operator">/</span>example<span class="token punctuation">.</span>js <span class="token operator">--</span>out<span class="token operator">-</span>file dist1<span class="token operator">/</span>compiled<span class="token punctuation">.</span>js
#或者
babel src<span class="token operator">/</span>example<span class="token punctuation">.</span>js <span class="token operator">--</span>o dist1<span class="token operator">/</span>compiled<span class="token punctuation">.</span>js

#整个目录转码
mkdir dist2
# <span class="token operator">--</span>out<span class="token operator">-</span>dir 或 <span class="token operator">-</span>d 参数指定输出目录
babel src <span class="token operator">--</span>out dir dist2
#或者
babel src <span class="token operator">-</span>d dist2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="Babel的转码过程" tabindex="0" loading="lazy"><figcaption>Babel的转码过程</figcaption></figure><h1 id="自定义脚本" tabindex="-1"><a class="header-anchor" href="#自定义脚本"><span>自定义脚本</span></a></h1><ol><li>改写package.js</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token comment">//...</span>
    <span class="token string">&quot;scripts&quot;</span><span class="token punctuation">{</span>
		<span class="token comment">//...</span>
        <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span><span class="token string">&quot;babel src/exmaple.js -o dist/example.js&quot;</span>
        <span class="token comment">//build这个只是一个名字，可以进行修改</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>    
<span class="token punctuation">}</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>转码的时候，执行下面的命令</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>mkdir dist
npm run build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>因为要输出到<code>dist</code>文件夹下所有要<code>mkdir dist</code> 创建出这个文件夹</p></blockquote><h1 id="common-js-模块化规范" tabindex="-1"><a class="header-anchor" href="#common-js-模块化规范"><span>common js 模块化规范</span></a></h1><p><strong>导出：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//工具类</span>
<span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">sub</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">mul</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">di</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 导出给别人使用</span>
<span class="token comment">// module.exports={</span>
<span class="token comment">//     sum:sum,</span>
<span class="token comment">//     sub:sub,</span>
<span class="token comment">//     mul:mul,</span>
<span class="token comment">//     di:di</span>
<span class="token comment">// }</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    sum<span class="token punctuation">,</span>
    sub<span class="token punctuation">,</span>
    mul<span class="token punctuation">,</span>
    di
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>导入使用：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//require</span>
<span class="token keyword">const</span> m<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./四则运算.js&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> n<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./print.js&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//必须要导出了才可以使用</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">di</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
n<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//common js 模块化开发  export  require   必须要导出了才可以使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="es6模块化规范" tabindex="-1"><a class="header-anchor" href="#es6模块化规范"><span>ES6模块化规范</span></a></h1><p>ES6使用export 和import 进行导出和导入模块</p><ol><li>默认情况下使用es6语法是无法运行，所以要进行使用Babel转码变为es2015</li></ol><h2 id="es6模块化写法1" tabindex="-1"><a class="header-anchor" href="#es6模块化写法1"><span>ES6模块化写法1：</span></a></h2><ol><li>创建 src/userAPI.js，导出模块</li></ol><div class="language-JS line-numbers-mode" data-ext="JS" data-title="JS"><pre class="language-JS"><code>export function getList(){
    //在真是业务中，使用异步获取数据
    console.log(&quot;获取数据列表&quot;);
}

export function save(){
    //在真是业务中，使用异步获取数据
    console.log(&quot;保存数据&quot;);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>创建 src/userTest.js，导入模块</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>save<span class="token punctuation">,</span>getList<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./userAPI&quot;</span>
<span class="token comment">//使用这个方式进行导入方法和依赖</span>
<span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es6模块化写法2" tabindex="-1"><a class="header-anchor" href="#es6模块化写法2"><span>ES6模块化写法2：</span></a></h2><ol><li>创建 src/userAPI.js，导出模块</li></ol><div class="language-JS line-numbers-mode" data-ext="JS" data-title="JS"><pre class="language-JS"><code>export default {
    getList() {

        console.log(&quot;获取数据列表&quot;);
    },
    save() {

        console.log(&quot;保存数据&quot;);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>创建 src/userTest.js，导入模块</li></ol><div class="language-JS line-numbers-mode" data-ext="JS" data-title="JS"><pre class="language-JS"><code>import user from &quot;./userAPI&quot;
//导出成一个对象
//使用这个方式进行导入方法和依赖
user.getList();
user.save();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导出后因为编译器是不支持es6语法所以要自己去babel转码一下</p><h1 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack"><span>Webpack</span></a></h1><p>Webpack是一个前端资源加载/打包工具，他将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源</p><p>从图中可以看出，Webpack可以将多种静态资源js，css，less转换成一个静态文件，减少了页面请求</p><figure><img src="`+o+`" alt="Webpack合并js,css过程" tabindex="0" loading="lazy"><figcaption>Webpack合并js,css过程</figcaption></figure><p>合并js加密压缩，css也可以进行压缩，提高浏览器访问速度</p><h2 id="webpack安装" tabindex="-1"><a class="header-anchor" href="#webpack安装"><span>Webpack安装</span></a></h2><ol><li>全局安装</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>npm install <span class="token operator">-</span>g webpack webpack<span class="token operator">-</span>cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>安装后检查版本号</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>webpack <span class="token operator">-</span>v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="js打包" tabindex="-1"><a class="header-anchor" href="#js打包"><span>js打包</span></a></h2><ol><li>创建webpack文件夹：nodejs项目</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>npm init <span class="token operator">-</span>y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><p>创建src文件夹</p></li><li><p>src下创建common.js</p></li></ol><div class="language-JS line-numbers-mode" data-ext="JS" data-title="JS"><pre class="language-JS"><code>exports.info=function(str){
	document.write(str);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>src下创建utils.js</li></ol><div class="language-JS line-numbers-mode" data-ext="JS" data-title="JS"><pre class="language-JS"><code>exports.add=function(a,b){
	return a+b;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>src下创建main.js（入口文件，就是模块集中进行引入）</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> common<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./common&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> utils<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./utils&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

common<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!&quot;</span><span class="token operator">+</span>utils<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1：创建一个nodejs项目 npm init -y</p><p>2：创建一个src目录</p><p>3：在src存放两个需要合并的util.js 和common.js</p><p>4：准备一个入口文件main.js，其实就是模块集中进行引入</p><p>//JS打包</p><p>5：在根目录下定义个webpack.config.js 文件配置打包的规则</p><p>6：执行webpack查看效果</p><p><strong>打包规则：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//导入path模块  nodejs内置模块</span>
<span class="token keyword">const</span> path<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载目录相关的东西</span>
<span class="token comment">//定义JS打包规则</span>
module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token comment">//1. 入口函数从哪里开始进行编译打包</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token string">&quot;./src/main.js&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">//2. 编译成功以后把内容输出到哪里去</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token comment">//2-1. 定义输出的指定目录__dirname当前项目根目录，产生一个dist文件</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&quot;./dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">//2-2. 合并的js文件存储在 dist/bundle.js 文件中</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">&quot;bundle.js&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="css打包" tabindex="-1"><a class="header-anchor" href="#css打包"><span>CSS打包</span></a></h2><ol><li>安装style-loader和css-loader</li></ol><blockquote><p>webpack本身只能处理JavaScript模块，如果要处理其他类型的文件，就需要使用loader进行转换。</p><p>Loader可以理解为模块和资源的转换器</p><p>首先我们需要安装相关Loader插件</p><ul><li>css-loader 是将css装载到JavaScript</li><li>style-loader是让JavaScript认识css</li></ul></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>npm install --save-dev style-loader css-loader
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>修改webpack.config.js</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>
	<span class="token comment">//...</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>
		<span class="token comment">//其他配置</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">module</span><span class="token operator">:</span><span class="token punctuation">{</span>
		<span class="token literal-property property">rules</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
			<span class="token literal-property property">test</span><span class="token operator">:</span><span class="token string">&quot;/\\.css$/&quot;</span><span class="token punctuation">,</span><span class="token comment">//把所有.css文件打包</span>
            <span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在src文件夹创建style.css</li></ol><div class="language-JS line-numbers-mode" data-ext="JS" data-title="JS"><pre class="language-JS"><code>body{
	backgroud:pink;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>修改main.js 在第一行引入style.css</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./style/css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li><p>要在package.js中加入</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span><span class="token string">&quot;webpack&quot;</span>
  
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>webpack 直接会进行配置打包，webpack -w打包而且可以时时监听</p><p>或者</p><p>如果不配置的话直接在控制台执行webpage/webpack -w</p></li><li><p>运行编译命令</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>npm run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="7"><li>浏览器中查看index.html，看看背景是不是变成粉红色</li></ol><p>默认情况下控制台输入webpack就会打包，其实webpage运行要带上东西的</p><p>webpack -config webpack.config.js</p><h1 id="vue-element-admin" tabindex="-1"><a class="header-anchor" href="#vue-element-admin"><span>Vue-element-admin</span></a></h1><p>Vue-element-admin十一个后台前端解决方案基于vue和element-ui实现</p>`,174),i=[l];function u(r,d){return s(),a("div",null,i)}const m=n(c,[["render",u],["__file","大前端.html.vue"]]);export{m as default};
